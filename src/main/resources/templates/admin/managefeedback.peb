<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feedback Management - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-SgOJa3DmI69IUzQ2PVdRZhwQ+dy64/BUtbMJw1MZ8t5HZApcHrRKUc4W0kG879m7" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
     <link rel="stylesheet" href="/admin/managefeedback.css">
     <link rel="stylesheet" href="/topbar/bar.css">

</head>
<body>
<!-- Theme Toggle -->
<div class="theme-toggle">
    <div class="dropdown">
        <button class="theme-btn" type="button" id="themeToggle" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-moon-stars-fill"></i>
        </button>
        <ul class="dropdown-menu theme-menu" aria-labelledby="themeToggle">
            <li><button class="dropdown-item theme-item" data-bs-theme-value="light"><i class="bi bi-sun-fill"></i>Light</button></li>
            <li><button class="dropdown-item theme-item active" data-bs-theme-value="dark"><i class="bi bi-moon-stars-fill"></i>Dark</button></li>
            <li><button class="dropdown-item theme-item" data-bs-theme-value="auto"><i class="bi bi-circle-half"></i>Auto</button></li>
        </ul>
    </div>
</div>

<!-- Navigation -->
<div class="nav-container">
    <div class="container py-2">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="logo-text m-0">Absolute Cinema</h1>
            <div class="search-container">
                <i class="bi bi-search search-icon"></i>
                <input id="searchInput" type="search" class="form-control" placeholder="Search movies..." aria-label="Search" autocomplete="off">
                <div id="filterDropdown" class="filter-dropdown dropdown-menu shadow" style="display: none;">
                    <div class="filter-section">
                        <div class="filter-section-title" onclick="toggleFilterSection('genre')">
                            Genre <i class="bi bi-chevron-down"></i>
                        </div>
                        <div id="genreOptions" class="filter-options">
                            <div class="filter-option">Action</div>
                            <div class="filter-option">Adventure</div>
                            <div class="filter-option">Animation</div>
                            <div class="filter-option">Comedy</div>
                            <div class="filter-option">Crime</div>
                            <div class="filter-option">Documentary</div>
                            <div class="filter-option">Drama</div>
                            <div class="filter-option">Family</div>
                            <div class="filter-option">Fantasy</div>
                            <div class="filter-option">History</div>
                            <div class="filter-option">Horror</div>
                            <div class="filter-option">Music</div>
                            <div class="filter-option">Mystery</div>
                            <div class="filter-option">Romance</div>
                            <div class="filter-option">Science Fiction</div>
                            <div class="filter-option">Thriller</div>
                            <div class="filter-option">War</div>
                            <div class="filter-option">Western</div>
                        </div>
                    </div>

                    <div class="filter-section">
                        <div class="filter-section-title" onclick="toggleFilterSection('year')">
                            Release Year <i class="bi bi-chevron-down"></i>
                        </div>
                        <div id="yearOptions" class="filter-options">
                            <div class="filter-option">2025</div>
                            <div class="filter-option">2024</div>
                            <div class="filter-option">2023</div>
                            <div class="filter-option">2022</div>
                            <div class="filter-option">2021</div>
                            <div class="filter-option">2020</div>
                            <div class="filter-option">2019</div>
                            <div class="filter-option">2018</div>
                            <div class="filter-option">2017</div>
                            <div class="filter-option">2016</div>
                            <div class="filter-option">2015</div>
                        </div>
                    </div>

                    <div class="filter-section">
                        <div class="filter-section-title" onclick="toggleFilterSection('rating')">
                            Top Rated <i class="bi bi-chevron-down"></i>
                        </div>
                        <div id="ratingOptions" class="filter-options">
                            <div class="filter-option">9+ Rating</div>
                            <div class="filter-option">8+ Rating</div>
                            <div class="filter-option">7+ Rating</div>
                            <div class="filter-option">6+ Rating</div>
                            <div class="filter-option">5+ Rating</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="d-flex flex-wrap align-items-center mt-3">
            <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 mb-md-0">
                <li><a href="/" class="nav-link px-2">Home</a></li>
                <li><a href="/movies" class="nav-link px-2">Movies</a></li>
                <li><a href="/employee/dashboard" class="nav-link px-2">Bookings</a></li>
                <li><a href="/snacks" class="nav-link px-2">Snacks</a></li>
                <li><a href="/loyalty" class="nav-link px-2">Loyalty Program</a></li>
                <li><a href="/feedback" class="nav-link px-2">Feedback</a></li>
                <li><a href="/contact" class="nav-link px-2">Contact</a></li>
            </ul>
        </div>
    </div>
</div>
    <!-- Main Content -->
    <div class="main-content">
        <div class="page-header d-flex justify-content-between align-items-center">
            <h2>Feedback Management</h2>
        </div>

        <!-- Stats Cards -->
        <div class="dashboard-stats">
            <div class="stat-card loading">
                <div class="icon">
                    <i class="bi bi-chat-square-text"></i>
                </div>
                <div class="stat-info">
                    <div class="label">Total Feedback</div>
                    <div class="value">Loading...</div>
                </div>
            </div>
            <div class="stat-card loading">
                <div class="icon">
                    <i class="bi bi-emoji-smile"></i>
                </div>
                <div class="stat-info">
                    <div class="label">Positive Feedback</div>
                    <div class="value">Loading...</div>
                </div>
            </div>
            <div class="stat-card loading">
                <div class="icon">
                    <i class="bi bi-emoji-frown"></i>
                </div>
                <div class="stat-info">
                    <div class="label">Negative Feedback</div>
                    <div class="value">Loading...</div>
                </div>
            </div>
        </div>

        <!-- Sentiment Analysis Chart -->
        <div class="charts-container">
            <div class="chart-card">
                <div class="chart-header">
                    <h4>Average Rating Trend (Last 30 Days)</h4>
                </div>
                <div class="chart-body">
                    <div class="chart-loading">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <canvas id="sentimentChart" style="display: none;"></canvas>
                </div>
            </div>
        </div>

        <!-- Filters -->
        <div class="filter-container">
            <div class="dropdown">
                <button class="filter-btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <span>Sentiment</span>
                    <i class="bi bi-chevron-down"></i>
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item active" href="#" data-sentiment="all">All Sentiments</a></li>
                    <li><a class="dropdown-item" href="#" data-sentiment="positive">Positive (â‰¥3)</a></li>
                    <li><a class="dropdown-item" href="#" data-sentiment="negative">Negative (<3)</a></li>
                </ul>
            </div>
            <div class="dropdown">
                <button class="filter-btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <span>Date Range</span>
                    <i class="bi bi-chevron-down"></i>
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item active" href="#" data-range="all">All Time</a></li>
                    <li><a class="dropdown-item" href="#" data-range="today">Today</a></li>
                    <li><a class="dropdown-item" href="#" data-range="week">This Week</a></li>
                    <li><a class="dropdown-item" href="#" data-range="month">This Month</a></li>
                    <li><a class="dropdown-item" href="#" data-range="3months">Last 3 Months</a></li>
                </ul>
            </div>
        </div>

        <!-- Feedback Management Section -->
        <div class="feedback-container">
            <div class="feedback-header">
                <h4>User Feedback</h4>
            </div>
            <div class="feedback-scrollable">
                <div class="feedback-loading">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading feedback...</p>
                </div>
            </div>
        </div>
    </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/js/bootstrap.bundle.min.js"></script>
<script src="/topbar/bar.js"></script>
    <script>
        // Fetch and update feedback statistics
        async function updateFeedbackStats() {
            try {
                // Show loading states
                document.querySelectorAll('.stat-card').forEach(card => card.classList.add('loading'));
                document.querySelector('.chart-loading').style.display = 'flex';
                document.getElementById('sentimentChart').style.display = 'none';
                document.querySelector('.feedback-loading').style.display = 'flex';
                document.querySelector('.feedback-scrollable').innerHTML = '';

                const response = await fetch('/api/feedback/statistics');
                const stats = await response.json();
                
                // Update the stat cards
                document.querySelectorAll('.stat-card').forEach(card => card.classList.remove('loading'));
                document.querySelector('.stat-card:nth-child(1) .value').textContent = stats.totalFeedback;
                document.querySelector('.stat-card:nth-child(2) .value').textContent = stats.positiveFeedback;
                document.querySelector('.stat-card:nth-child(3) .value').textContent = stats.negativeFeedback;

                // Update the chart with real data
                updateChart(stats.chartData);
                document.querySelector('.chart-loading').style.display = 'none';
                document.getElementById('sentimentChart').style.display = 'block';
            } catch (error) {
                console.error('Error fetching feedback statistics:', error);
                // Handle error state
                document.querySelectorAll('.stat-card').forEach(card => {
                    card.classList.remove('loading');
                    card.querySelector('.value').textContent = 'Error';
                });
            }
        }

        function updateChart(chartData) {
            const sentimentCtx = document.getElementById('sentimentChart').getContext('2d');
            const sentimentChart = new Chart(sentimentCtx, {
                type: 'line',
                data: {
                    labels: chartData.labels,
                    datasets: [
                        {
                            label: 'Average Rating',
                            data: chartData.averageRatings,
                            borderColor: '#36d1b7',
                            backgroundColor: 'rgba(54, 209, 183, 0.1)',
                            tension: 0.4,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                color: '#8a8d99'
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                color: 'rgba(50, 52, 62, 0.5)'
                            },
                            ticks: {
                                color: '#8a8d99'
                            }
                        },
                        y: {
                            min: 0,
                            max: 5,
                            grid: {
                                color: 'rgba(50, 52, 62, 0.5)'
                            },
                            ticks: {
                                color: '#8a8d99',
                                stepSize: 1
                            }
                        }
                    }
                }
            });
        }

        // Function to format date
        function formatDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffTime = Math.abs(now - date);
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
            const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
            const diffMinutes = Math.floor(diffTime / (1000 * 60));

            if (diffDays > 0) {
                return `${diffDays} ${diffDays === 1 ? 'day' : 'days'} ago`;
            } else if (diffHours > 0) {
                return `${diffHours} ${diffHours === 1 ? 'hour' : 'hours'} ago`;
            } else {
                return `${diffMinutes} ${diffMinutes === 1 ? 'minute' : 'minutes'} ago`;
            }
        }

        // Function to generate star rating
        function generateStars(rating) {
            const fullStars = 'â˜…'.repeat(Math.floor(rating));
            const halfStar = rating % 1 >= 0.5 ? 'Â½' : '';
            const emptyStars = 'â˜†'.repeat(5 - Math.ceil(rating));
            return fullStars + halfStar + emptyStars;
        }

        let currentFeedback = [];
        let currentSentiment = 'all';
        let currentDateRange = 'all';

        // Function to filter feedback based on current filters
        function filterFeedback() {
            const feedbackContainer = document.querySelector('.feedback-scrollable');
            if (!feedbackContainer) return;

            let filteredFeedback = [...currentFeedback];

            // Apply sentiment filter
            if (currentSentiment !== 'all') {
                filteredFeedback = filteredFeedback.filter(feedback => {
                    const isPositive = feedback.rating >= 3;
                    return currentSentiment === 'positive' ? isPositive : !isPositive;
                });
            }

            // Apply date range filter
            const now = new Date();
            if (currentDateRange !== 'all') {
                filteredFeedback = filteredFeedback.filter(feedback => {
                    const feedbackDate = new Date(feedback.createdAt);
                    const diffTime = now - feedbackDate;
                    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

                    switch (currentDateRange) {
                        case 'today':
                            return diffDays === 0;
                        case 'week':
                            return diffDays <= 7;
                        case 'month':
                            return diffDays <= 30;
                        case '3months':
                            return diffDays <= 90;
                        default:
                            return true;
                    }
                });
            }

            // Render filtered feedback
            feedbackContainer.innerHTML = filteredFeedback.map(feedback => {
                let userName = "~anonymous";
                if (feedback.userName && feedback.userName.trim() !== "null null") {
                    userName = feedback.userName;
                }
                
                return `
                    <div class="feedback-item">
                        <span class="badge badge-${feedback.rating >= 3 ? 'positive' : 'negative'} mb-2">${feedback.rating >= 3 ? 'Positive' : 'Negative'}</span>
                        <div class="movie-title">${feedback.movieTitle}</div>
                        <div class="feedback-text">"${feedback.comment}"</div>
                        <div class="feedback-meta">
                            <div class="star-rating">
                                <div class="stars">${generateStars(feedback.rating)}</div>
                                <span>${feedback.rating.toFixed(1)}</span>
                            </div>
                            <div class="user-info">${userName} - ${formatDate(feedback.createdAt)}</div>
                        </div>
                        <div class="feedback-actions">
                            <button class="btn-outline btn-sm delete-btn" data-feedback-id="${feedback.id}">
                                <i class="bi bi-trash me-1"></i> Delete
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Function to load feedback list
        async function loadFeedbackList() {
            try {
                console.log('Loading feedback list...');
                const response = await fetch('/api/feedback/list');
                console.log('Response received:', response);
                const feedbacks = await response.json();
                console.log('Feedback data:', feedbacks);
                
                const feedbackContainer = document.querySelector('.feedback-scrollable');
                const loadingSpinner = document.querySelector('.feedback-loading');
                
                if (loadingSpinner) {
                    loadingSpinner.style.display = 'none';
                }
                
                // Store the feedback data
                currentFeedback = feedbacks;
                
                // Apply initial filtering
                filterFeedback();
                
                console.log('Feedback list rendered');
            } catch (error) {
                console.error('Error loading feedback list:', error);
                const loadingSpinner = document.querySelector('.feedback-loading');
                const feedbackContainer = document.querySelector('.feedback-scrollable');
                
                if (loadingSpinner) {
                    loadingSpinner.style.display = 'none';
                }
                
                if (feedbackContainer) {
                    feedbackContainer.innerHTML = `
                        <div class="error-message">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                            <p>Failed to load feedback. Please try again later.</p>
                        </div>
                    `;
                }
            }
        }

        // Add event listeners for filter dropdowns
        document.addEventListener('DOMContentLoaded', function() {
            // Sentiment filter
            document.querySelectorAll('[data-sentiment]').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    currentSentiment = this.getAttribute('data-sentiment');
                    
                    // Update active state
                    document.querySelectorAll('[data-sentiment]').forEach(i => i.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update button text
                    const button = this.closest('.dropdown').querySelector('.filter-btn span');
                    if (button) {
                        button.textContent = this.textContent;
                    }
                    
                    filterFeedback();
                });
            });

            // Date range filter
            document.querySelectorAll('[data-range]').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    currentDateRange = this.getAttribute('data-range');
                    
                    // Update active state
                    document.querySelectorAll('[data-range]').forEach(i => i.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update button text
                    const button = this.closest('.dropdown').querySelector('.filter-btn span');
                    if (button) {
                        button.textContent = this.textContent;
                    }
                    
                    filterFeedback();
                });
            });

            // Add event delegation for delete buttons
            document.querySelector('.feedback-scrollable').addEventListener('click', function(e) {
                if (e.target.closest('.delete-btn')) {
                    const feedbackId = e.target.closest('.delete-btn').getAttribute('data-feedback-id');
                    if (confirm('Are you sure you want to delete this feedback?')) {
                        deleteFeedback(feedbackId);
                    }
                }
            });

            // Initialize the page
            updateFeedbackStats();
            loadFeedbackList();
        });

        // Toggle Filter Menus
        function toggleFilterMenu(id) {
            document.getElementById(id).classList.toggle('show');
            // Close other menus
            document.querySelectorAll('.filter-menu.show').forEach(menu => {
                if (menu.id !== id) {
                    menu.classList.remove('show');
                }
            });
        }

        // Theme Toggling
        document.querySelectorAll('.theme-item').forEach(button => {
            button.addEventListener('click', () => {
                const theme = button.getAttribute('data-bs-theme-value');
                document.querySelector('html').setAttribute('data-bs-theme', theme);

                // Update active state
                document.querySelectorAll('.theme-item').forEach(btn => {
                    btn.classList.remove('active');
                });
                button.classList.add('active');

                // Update theme toggle icon
                const themeIcon = document.querySelector('#themeToggle i');
                if (theme === 'light') {
                    themeIcon.className = 'bi bi-sun-fill';
                    document.body.classList.add('light-theme');
                } else if (theme === 'dark') {
                    themeIcon.className = 'bi bi-moon-stars-fill';
                    document.body.classList.remove('light-theme');
                } else {
                    themeIcon.className = 'bi bi-circle-half';

                    // Check system preference
                    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                        document.body.classList.remove('light-theme');
                    } else {
                        document.body.classList.add('light-theme');
                    }
                }
            });
        });

        // Function to handle feedback deletion
        async function deleteFeedback(feedbackId) {
            try {
                const response = await fetch(`/api/feedback/${feedbackId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    // Remove the feedback item from the UI
                    const feedbackItem = document.querySelector(`[data-feedback-id="${feedbackId}"]`).closest('.feedback-item');
                    feedbackItem.remove();
                    
                    // Update statistics
                    updateFeedbackStats();
                } else {
                    throw new Error('Failed to delete feedback');
                }
            } catch (error) {
                console.error('Error deleting feedback:', error);
                alert('Failed to delete feedback. Please try again.');
            }
        }
    </script>

<style>
.loading {
    position: relative;
    overflow: hidden;
}

.loading::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    animation: loading 1.5s infinite;
}

@keyframes loading {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

.chart-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 300px;
}

.feedback-loading {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 200px;
    color: var(--bs-body-color);
}

.feedback-loading p {
    margin-top: 1rem;
    font-size: 0.9rem;
}

.spinner-border {
    width: 3rem;
    height: 3rem;
    border-width: 0.25rem;
}
</style>
</body>
</html>