<!DOCTYPE html>
<html>
<head>
<title>Payment - Absolute Cinema</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
        .StripeElement {
            box-sizing: border-box;
    height: 40px;
            padding: 10px 12px;
            border: 1px solid #ccd0d5;
            border-radius: 4px;
            background-color: white;
        }
        .StripeElement--focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }
        .StripeElement--invalid {
            border-color: #dc3545;
    }
        .loyalty-section {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
        .loyalty-section.eligible {
            background-color: #e8f5e9;
            border: 1px solid #4caf50;
        }
        .loyalty-section.not-eligible {
            background-color: #f5f5f5;
            border: 1px solid #9e9e9e;
        }
</style>
</head>
<body>
    <div class="container mt-5">
    <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h4>Payment Details</h4>
                    </div>
                    <div class="card-body">
                        <div id="order-summary" class="mb-4">
                            <h5>Order Summary</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Movie:</strong> <span id="movie-title"></span></p>
                                    <p><strong>Session:</strong> <span id="session-time"></span></p>
                                    <p><strong>Seats:</strong> <span id="selected-seats"></span></p>
                </div>
                                <div class="col-md-6">
                                    <p><strong>Number of Tickets:</strong> <span id="ticket-count"></span></p>
                                    <p><strong>Snacks:</strong> <span id="selected-snacks"></span></p>
                                    <p><strong>Total Amount:</strong> PKR <span id="total-amount"></span></p>
                    </div>
                    </div>
                </div>

                        <!-- Loyalty Points Section -->
                        <div id="loyalty-section" class="loyalty-section mb-4">
                            <h5>Loyalty Points</h5>
                            <p>Your current points: <strong>{{ user.points }}</strong></p>
                            {% if user.points >= 250 %}
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="redeem-points" name="redeem-points">
                                    <label class="form-check-label" for="redeem-points">
                                        Redeem 250 points for a free movie ticket and snack (PKR {{ ticketPrice + snackPrice }} value)
                                    </label>
                                </div>
                            {% else %}
                                <p class="text-muted">You need 250 points to redeem for a free movie ticket and snack. Keep earning!</p>
                            {% endif %}
                        </div>

                        <form id="payment-form">
                    <div class="form-group">
                                <label for="card-element">Credit or Debit Card</label>
                                <div id="card-element" class="StripeElement"></div>
                                <div id="card-errors" class="text-danger mt-2" role="alert"></div>
                    </div>
                            <button type="submit" class="btn btn-primary mt-3" id="submit-button">
                                Pay PKR <span id="payment-amount"></span>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://js.stripe.com/v3/"></script>
    <script>
        // Initialize Stripe
        const stripe = Stripe('{{ stripePublicKey }}');
        const elements = stripe.elements();
        const card = elements.create('card');
        card.mount('#card-element');

        // Load and display order details
    document.addEventListener('DOMContentLoaded', function() {
            // Use orderDetails object for all data
            const orderDetails = JSON.parse(sessionStorage.getItem('orderDetails') || '{}');
            const movieTitle = orderDetails.movieTitle || sessionStorage.getItem('movieTitle') || '';
            const sessionTime = orderDetails.sessionTime || sessionStorage.getItem('sessionTime') || '';
            const movieId = orderDetails.movieId || sessionStorage.getItem('movieId') || '';
            const sessionId = orderDetails.sessionId || sessionStorage.getItem('sessionId') || '';
            const seats = orderDetails.seats || JSON.parse(sessionStorage.getItem('selectedSeats') || '[]');
            const snacks = orderDetails.snacks || JSON.parse(sessionStorage.getItem('selectedSnacks') || '{}');
            const ticketPrice = orderDetails.ticketPrice || 12;
            // Display seats
            const seatDisplay = Array.isArray(seats) ? seats.map(seat => {
                if (typeof seat === 'object' && seat !== null) {
                    return `Row ${seat.row} Seat ${seat.seat}`;
                }
                return seat;
            }).join(', ') : '';
            // Display snacks
            const snackDisplay = Object.values(snacks).map(snack => `${snack.name} x ${snack.quantity}`).join(', ');
            // Calculate totals
            const seatTotal = seats.length * ticketPrice;
            const snackTotal = Object.values(snacks).reduce((sum, snack) => sum + (snack.price * snack.quantity), 0);
            const totalAmount = seatTotal + snackTotal;
            // Update display
            document.getElementById('movie-title').textContent = movieTitle;
            document.getElementById('session-time').textContent = sessionTime;
            document.getElementById('selected-seats').textContent = seatDisplay;
            document.getElementById('ticket-count').textContent = seats.length;
            document.getElementById('selected-snacks').textContent = snackDisplay;
            document.getElementById('total-amount').textContent = totalAmount.toFixed(2);
            document.getElementById('payment-amount').textContent = totalAmount.toFixed(2);
            // Store order details for payment processing
            window.orderDetails = {
                movieId,
                sessionId,
                seats,
                snacks,
                totalAmount
            };

            // Handle loyalty points redemption
            const redeemCheckbox = document.getElementById('redeem-points');
            if (redeemCheckbox) {
                redeemCheckbox.addEventListener('change', function() {
                    const paymentAmountElement = document.getElementById('payment-amount');
                    const totalAmountElement = document.getElementById('total-amount');
                    const currentTotal = parseFloat(totalAmountElement.textContent);
                    
                    if (this.checked) {
                        const discountAmount = {{ ticketPrice + snackPrice }};
                        const newTotal = Math.max(0, currentTotal - discountAmount);
                        paymentAmountElement.textContent = newTotal.toFixed(2);
                    } else {
                        paymentAmountElement.textContent = currentTotal.toFixed(2);
                    }
                });
            }
        });

        // Handle form submission
        const form = document.getElementById('payment-form');
        form.addEventListener('submit', async (event) => {
            event.preventDefault();
            const submitButton = document.getElementById('submit-button');
            submitButton.disabled = true;

            try {
                // Validate required fields
                if (!window.orderDetails.movieId || !window.orderDetails.sessionId) {
                    throw new Error('Missing movie or session information');
                }

                if (!window.orderDetails.seats || window.orderDetails.seats.length === 0) {
                    throw new Error('No seats selected');
                }

                // Get redemption status
                const redeemCheckbox = document.getElementById('redeem-points');
                const applyRedemption = redeemCheckbox && redeemCheckbox.checked;

                const { paymentMethod, error } = await stripe.createPaymentMethod({
                    type: 'card',
                    card: card,
                });

                if (error) {
                    const errorElement = document.getElementById('card-errors');
                    errorElement.textContent = error.message;
                    submitButton.disabled = false;
                    return;
                }

                // Prepare payment data
                const paymentData = {
                    paymentMethodId: paymentMethod.id,
                    amount: parseFloat(document.getElementById('payment-amount').textContent),
                    seats: window.orderDetails.seats,
                    snacks: window.orderDetails.snacks,
                    movieId: parseInt(window.orderDetails.movieId),
                    sessionId: parseInt(window.orderDetails.sessionId),
                    applyRedemption: applyRedemption
                };

                // Validate numeric values
                if (isNaN(paymentData.amount) || paymentData.amount < 0) {
                    throw new Error('Invalid amount');
                }
                if (isNaN(paymentData.movieId) || paymentData.movieId <= 0) {
                    throw new Error('Invalid movie ID');
                }
                if (isNaN(paymentData.sessionId) || paymentData.sessionId <= 0) {
                    throw new Error('Invalid session ID');
                }

                // Send payment request to server
                const response = await fetch('/user/payment/process', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(paymentData)
                });

                const result = await response.json();

                if (result.success) {
                    sessionStorage.setItem('bookingSuccess', '1');
                    window.location.href = result.redirectUrl;
                } else {
                    const errorElement = document.getElementById('card-errors');
                    errorElement.textContent = result.error;
                    submitButton.disabled = false;
                }
            } catch (error) {
                const errorElement = document.getElementById('card-errors');
                errorElement.textContent = error.message || 'An error occurred. Please try again.';
                submitButton.disabled = false;
            }
    });
</script>
</body>
</html>